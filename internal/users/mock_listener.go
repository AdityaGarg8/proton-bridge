// Code generated by MockGen. DO NOT EDIT.
// Source: ./listener/listener.go

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockListener is a mock of Listener interface
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// SetLimit mocks base method
func (m *MockListener) SetLimit(eventName string, limit time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLimit", eventName, limit)
}

// SetLimit indicates an expected call of SetLimit
func (mr *MockListenerMockRecorder) SetLimit(eventName, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MockListener)(nil).SetLimit), eventName, limit)
}

// Add mocks base method
func (m *MockListener) Add(eventName string, channel chan<- string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", eventName, channel)
}

// Add indicates an expected call of Add
func (mr *MockListenerMockRecorder) Add(eventName, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockListener)(nil).Add), eventName, channel)
}

// Remove mocks base method
func (m *MockListener) Remove(eventName string, channel chan<- string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", eventName, channel)
}

// Remove indicates an expected call of Remove
func (mr *MockListenerMockRecorder) Remove(eventName, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockListener)(nil).Remove), eventName, channel)
}

// Emit mocks base method
func (m *MockListener) Emit(eventName, data string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", eventName, data)
}

// Emit indicates an expected call of Emit
func (mr *MockListenerMockRecorder) Emit(eventName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockListener)(nil).Emit), eventName, data)
}

// SetBuffer mocks base method
func (m *MockListener) SetBuffer(eventName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBuffer", eventName)
}

// SetBuffer indicates an expected call of SetBuffer
func (mr *MockListenerMockRecorder) SetBuffer(eventName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuffer", reflect.TypeOf((*MockListener)(nil).SetBuffer), eventName)
}

// RetryEmit mocks base method
func (m *MockListener) RetryEmit(eventName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RetryEmit", eventName)
}

// RetryEmit indicates an expected call of RetryEmit
func (mr *MockListenerMockRecorder) RetryEmit(eventName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryEmit", reflect.TypeOf((*MockListener)(nil).RetryEmit), eventName)
}
