// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ProtonMail/proton-bridge/v3/internal/services/userevents (interfaces: MessageSubscriber,LabelSubscriber,AddressSubscriber,RefreshSubscriber,UserSubscriber,UserUsedSpaceSubscriber)

// Package userevents is a generated GoMock package.
package userevents

import (
	context "context"
	reflect "reflect"

	proton "github.com/ProtonMail/go-proton-api"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageSubscriber is a mock of MessageSubscriber interface.
type MockMessageSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSubscriberMockRecorder
}

// MockMessageSubscriberMockRecorder is the mock recorder for MockMessageSubscriber.
type MockMessageSubscriberMockRecorder struct {
	mock *MockMessageSubscriber
}

// NewMockMessageSubscriber creates a new mock instance.
func NewMockMessageSubscriber(ctrl *gomock.Controller) *MockMessageSubscriber {
	mock := &MockMessageSubscriber{ctrl: ctrl}
	mock.recorder = &MockMessageSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSubscriber) EXPECT() *MockMessageSubscriberMockRecorder {
	return m.recorder
}

// cancel mocks base method.
func (m *MockMessageSubscriber) cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel")
}

// cancel indicates an expected call of cancel.
func (mr *MockMessageSubscriberMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockMessageSubscriber)(nil).cancel))
}

// close mocks base method.
func (m *MockMessageSubscriber) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockMessageSubscriberMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockMessageSubscriber)(nil).close))
}

// handle mocks base method.
func (m *MockMessageSubscriber) handle(arg0 context.Context, arg1 []proton.MessageEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockMessageSubscriberMockRecorder) handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockMessageSubscriber)(nil).handle), arg0, arg1)
}

// name mocks base method.
func (m *MockMessageSubscriber) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockMessageSubscriberMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*MockMessageSubscriber)(nil).name))
}

// MockLabelSubscriber is a mock of LabelSubscriber interface.
type MockLabelSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockLabelSubscriberMockRecorder
}

// MockLabelSubscriberMockRecorder is the mock recorder for MockLabelSubscriber.
type MockLabelSubscriberMockRecorder struct {
	mock *MockLabelSubscriber
}

// NewMockLabelSubscriber creates a new mock instance.
func NewMockLabelSubscriber(ctrl *gomock.Controller) *MockLabelSubscriber {
	mock := &MockLabelSubscriber{ctrl: ctrl}
	mock.recorder = &MockLabelSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabelSubscriber) EXPECT() *MockLabelSubscriberMockRecorder {
	return m.recorder
}

// cancel mocks base method.
func (m *MockLabelSubscriber) cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel")
}

// cancel indicates an expected call of cancel.
func (mr *MockLabelSubscriberMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockLabelSubscriber)(nil).cancel))
}

// close mocks base method.
func (m *MockLabelSubscriber) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockLabelSubscriberMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockLabelSubscriber)(nil).close))
}

// handle mocks base method.
func (m *MockLabelSubscriber) handle(arg0 context.Context, arg1 []proton.LabelEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockLabelSubscriberMockRecorder) handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockLabelSubscriber)(nil).handle), arg0, arg1)
}

// name mocks base method.
func (m *MockLabelSubscriber) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockLabelSubscriberMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*MockLabelSubscriber)(nil).name))
}

// MockAddressSubscriber is a mock of AddressSubscriber interface.
type MockAddressSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockAddressSubscriberMockRecorder
}

// MockAddressSubscriberMockRecorder is the mock recorder for MockAddressSubscriber.
type MockAddressSubscriberMockRecorder struct {
	mock *MockAddressSubscriber
}

// NewMockAddressSubscriber creates a new mock instance.
func NewMockAddressSubscriber(ctrl *gomock.Controller) *MockAddressSubscriber {
	mock := &MockAddressSubscriber{ctrl: ctrl}
	mock.recorder = &MockAddressSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressSubscriber) EXPECT() *MockAddressSubscriberMockRecorder {
	return m.recorder
}

// cancel mocks base method.
func (m *MockAddressSubscriber) cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel")
}

// cancel indicates an expected call of cancel.
func (mr *MockAddressSubscriberMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockAddressSubscriber)(nil).cancel))
}

// close mocks base method.
func (m *MockAddressSubscriber) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockAddressSubscriberMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockAddressSubscriber)(nil).close))
}

// handle mocks base method.
func (m *MockAddressSubscriber) handle(arg0 context.Context, arg1 []proton.AddressEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockAddressSubscriberMockRecorder) handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockAddressSubscriber)(nil).handle), arg0, arg1)
}

// name mocks base method.
func (m *MockAddressSubscriber) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockAddressSubscriberMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*MockAddressSubscriber)(nil).name))
}

// MockRefreshSubscriber is a mock of RefreshSubscriber interface.
type MockRefreshSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshSubscriberMockRecorder
}

// MockRefreshSubscriberMockRecorder is the mock recorder for MockRefreshSubscriber.
type MockRefreshSubscriberMockRecorder struct {
	mock *MockRefreshSubscriber
}

// NewMockRefreshSubscriber creates a new mock instance.
func NewMockRefreshSubscriber(ctrl *gomock.Controller) *MockRefreshSubscriber {
	mock := &MockRefreshSubscriber{ctrl: ctrl}
	mock.recorder = &MockRefreshSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshSubscriber) EXPECT() *MockRefreshSubscriberMockRecorder {
	return m.recorder
}

// cancel mocks base method.
func (m *MockRefreshSubscriber) cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel")
}

// cancel indicates an expected call of cancel.
func (mr *MockRefreshSubscriberMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockRefreshSubscriber)(nil).cancel))
}

// close mocks base method.
func (m *MockRefreshSubscriber) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockRefreshSubscriberMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockRefreshSubscriber)(nil).close))
}

// handle mocks base method.
func (m *MockRefreshSubscriber) handle(arg0 context.Context, arg1 proton.RefreshFlag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockRefreshSubscriberMockRecorder) handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockRefreshSubscriber)(nil).handle), arg0, arg1)
}

// name mocks base method.
func (m *MockRefreshSubscriber) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockRefreshSubscriberMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*MockRefreshSubscriber)(nil).name))
}

// MockUserSubscriber is a mock of UserSubscriber interface.
type MockUserSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockUserSubscriberMockRecorder
}

// MockUserSubscriberMockRecorder is the mock recorder for MockUserSubscriber.
type MockUserSubscriberMockRecorder struct {
	mock *MockUserSubscriber
}

// NewMockUserSubscriber creates a new mock instance.
func NewMockUserSubscriber(ctrl *gomock.Controller) *MockUserSubscriber {
	mock := &MockUserSubscriber{ctrl: ctrl}
	mock.recorder = &MockUserSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSubscriber) EXPECT() *MockUserSubscriberMockRecorder {
	return m.recorder
}

// cancel mocks base method.
func (m *MockUserSubscriber) cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel")
}

// cancel indicates an expected call of cancel.
func (mr *MockUserSubscriberMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockUserSubscriber)(nil).cancel))
}

// close mocks base method.
func (m *MockUserSubscriber) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockUserSubscriberMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockUserSubscriber)(nil).close))
}

// handle mocks base method.
func (m *MockUserSubscriber) handle(arg0 context.Context, arg1 proton.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockUserSubscriberMockRecorder) handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockUserSubscriber)(nil).handle), arg0, arg1)
}

// name mocks base method.
func (m *MockUserSubscriber) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockUserSubscriberMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*MockUserSubscriber)(nil).name))
}

// MockUserUsedSpaceSubscriber is a mock of UserUsedSpaceSubscriber interface.
type MockUserUsedSpaceSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsedSpaceSubscriberMockRecorder
}

// MockUserUsedSpaceSubscriberMockRecorder is the mock recorder for MockUserUsedSpaceSubscriber.
type MockUserUsedSpaceSubscriberMockRecorder struct {
	mock *MockUserUsedSpaceSubscriber
}

// NewMockUserUsedSpaceSubscriber creates a new mock instance.
func NewMockUserUsedSpaceSubscriber(ctrl *gomock.Controller) *MockUserUsedSpaceSubscriber {
	mock := &MockUserUsedSpaceSubscriber{ctrl: ctrl}
	mock.recorder = &MockUserUsedSpaceSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsedSpaceSubscriber) EXPECT() *MockUserUsedSpaceSubscriberMockRecorder {
	return m.recorder
}

// cancel mocks base method.
func (m *MockUserUsedSpaceSubscriber) cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel")
}

// cancel indicates an expected call of cancel.
func (mr *MockUserUsedSpaceSubscriberMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockUserUsedSpaceSubscriber)(nil).cancel))
}

// close mocks base method.
func (m *MockUserUsedSpaceSubscriber) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockUserUsedSpaceSubscriberMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockUserUsedSpaceSubscriber)(nil).close))
}

// handle mocks base method.
func (m *MockUserUsedSpaceSubscriber) handle(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockUserUsedSpaceSubscriberMockRecorder) handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockUserUsedSpaceSubscriber)(nil).handle), arg0, arg1)
}

// name mocks base method.
func (m *MockUserUsedSpaceSubscriber) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockUserUsedSpaceSubscriberMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*MockUserUsedSpaceSubscriber)(nil).name))
}
