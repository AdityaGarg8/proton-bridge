// Code generated by MockGen. DO NOT EDIT.
// Source: config/config.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockappDirer is a mock of appDirer interface
type MockappDirer struct {
	ctrl     *gomock.Controller
	recorder *MockappDirerMockRecorder
}

// MockappDirerMockRecorder is the mock recorder for MockappDirer
type MockappDirerMockRecorder struct {
	mock *MockappDirer
}

// NewMockappDirer creates a new mock instance
func NewMockappDirer(ctrl *gomock.Controller) *MockappDirer {
	mock := &MockappDirer{ctrl: ctrl}
	mock.recorder = &MockappDirerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappDirer) EXPECT() *MockappDirerMockRecorder {
	return m.recorder
}

// UserConfig mocks base method
func (m *MockappDirer) UserConfig() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserConfig")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserConfig indicates an expected call of UserConfig
func (mr *MockappDirerMockRecorder) UserConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserConfig", reflect.TypeOf((*MockappDirer)(nil).UserConfig))
}

// UserCache mocks base method
func (m *MockappDirer) UserCache() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCache")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserCache indicates an expected call of UserCache
func (mr *MockappDirerMockRecorder) UserCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCache", reflect.TypeOf((*MockappDirer)(nil).UserCache))
}

// UserLogs mocks base method
func (m *MockappDirer) UserLogs() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogs")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserLogs indicates an expected call of UserLogs
func (mr *MockappDirerMockRecorder) UserLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogs", reflect.TypeOf((*MockappDirer)(nil).UserLogs))
}
